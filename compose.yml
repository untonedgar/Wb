services:
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: apps_prod:1.0.0
    command: daphne -b 0.0.0.0 -p 8000 app.asgi:application
    expose:
      - 8000
    volumes:
      - static_volume:/usr/src/app/static
    restart: unless-stopped
    env_file:
      - ./app/.env.dev
    depends_on:
      - db
      - elasticsearch
      - redis

  celery:
    image: apps_prod:1.0.0
    command: celery -A app worker --loglevel=info --concurrency=4 -E
    volumes:
      - static_volume:/usr/src/app/static
    env_file:
      - ./app/.env.dev
    restart: on-failure
    depends_on:
      - redis
      - db
      - elasticsearch
      - app
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping -A app -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=password
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    env_file:
      - ./app/.env.dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U django -d wb" ]
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: postgres:16-bookworm
    volumes:
      - data:/var/lib/postgresql/data/
    restart: unless-stopped
    env_file:
      - ./app/.env.dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U django -d wb" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    build: ./nginx
    image: nginx_prod:1.0.0
    volumes:
      - static_volume:/app/static
    ports:
      - 8001:80
    depends_on:
      - app


volumes:
  static_volume:
  redis_data:
  es_data:
  data:


